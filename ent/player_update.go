// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/smxlong/mud/ent/player"
	"github.com/smxlong/mud/ent/playerrole"
	"github.com/smxlong/mud/ent/predicate"
	"github.com/smxlong/mud/ent/room"
)

// PlayerUpdate is the builder for updating Player entities.
type PlayerUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerMutation
}

// Where appends a list predicates to the PlayerUpdate builder.
func (pu *PlayerUpdate) Where(ps ...predicate.Player) *PlayerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlayerUpdate) SetName(s string) *PlayerUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableName(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PlayerUpdate) SetDescription(s string) *PlayerUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableDescription(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PlayerUpdate) ClearDescription() *PlayerUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetPassword sets the "password" field.
func (pu *PlayerUpdate) SetPassword(s string) *PlayerUpdate {
	pu.mutation.SetPassword(s)
	return pu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillablePassword(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetPassword(*s)
	}
	return pu
}

// SetEmail sets the "email" field.
func (pu *PlayerUpdate) SetEmail(s string) *PlayerUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableEmail(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (pu *PlayerUpdate) SetRoomID(id string) *PlayerUpdate {
	pu.mutation.SetRoomID(id)
	return pu
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableRoomID(id *string) *PlayerUpdate {
	if id != nil {
		pu = pu.SetRoomID(*id)
	}
	return pu
}

// SetRoom sets the "room" edge to the Room entity.
func (pu *PlayerUpdate) SetRoom(r *Room) *PlayerUpdate {
	return pu.SetRoomID(r.ID)
}

// AddPlayerRoleIDs adds the "player_roles" edge to the PlayerRole entity by IDs.
func (pu *PlayerUpdate) AddPlayerRoleIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddPlayerRoleIDs(ids...)
	return pu
}

// AddPlayerRoles adds the "player_roles" edges to the PlayerRole entity.
func (pu *PlayerUpdate) AddPlayerRoles(p ...*PlayerRole) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPlayerRoleIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (pu *PlayerUpdate) Mutation() *PlayerMutation {
	return pu.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (pu *PlayerUpdate) ClearRoom() *PlayerUpdate {
	pu.mutation.ClearRoom()
	return pu
}

// ClearPlayerRoles clears all "player_roles" edges to the PlayerRole entity.
func (pu *PlayerUpdate) ClearPlayerRoles() *PlayerUpdate {
	pu.mutation.ClearPlayerRoles()
	return pu
}

// RemovePlayerRoleIDs removes the "player_roles" edge to PlayerRole entities by IDs.
func (pu *PlayerUpdate) RemovePlayerRoleIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemovePlayerRoleIDs(ids...)
	return pu
}

// RemovePlayerRoles removes "player_roles" edges to PlayerRole entities.
func (pu *PlayerUpdate) RemovePlayerRoles(p ...*PlayerRole) *PlayerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePlayerRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlayerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlayerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlayerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlayerUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := player.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Player.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Email(); ok {
		if err := player.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Player.email": %w`, err)}
		}
	}
	return nil
}

func (pu *PlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(player.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(player.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Password(); ok {
		_spec.SetField(player.FieldPassword, field.TypeString, value)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(player.FieldEmail, field.TypeString, value)
	}
	if pu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.RoomTable,
			Columns: []string{player.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.RoomTable,
			Columns: []string{player.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlayerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   player.PlayerRolesTable,
			Columns: player.PlayerRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlayerRolesIDs(); len(nodes) > 0 && !pu.mutation.PlayerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   player.PlayerRolesTable,
			Columns: player.PlayerRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlayerRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   player.PlayerRolesTable,
			Columns: player.PlayerRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlayerUpdateOne is the builder for updating a single Player entity.
type PlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerMutation
}

// SetName sets the "name" field.
func (puo *PlayerUpdateOne) SetName(s string) *PlayerUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableName(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PlayerUpdateOne) SetDescription(s string) *PlayerUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableDescription(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PlayerUpdateOne) ClearDescription() *PlayerUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetPassword sets the "password" field.
func (puo *PlayerUpdateOne) SetPassword(s string) *PlayerUpdateOne {
	puo.mutation.SetPassword(s)
	return puo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillablePassword(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetPassword(*s)
	}
	return puo
}

// SetEmail sets the "email" field.
func (puo *PlayerUpdateOne) SetEmail(s string) *PlayerUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableEmail(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (puo *PlayerUpdateOne) SetRoomID(id string) *PlayerUpdateOne {
	puo.mutation.SetRoomID(id)
	return puo
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableRoomID(id *string) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetRoomID(*id)
	}
	return puo
}

// SetRoom sets the "room" edge to the Room entity.
func (puo *PlayerUpdateOne) SetRoom(r *Room) *PlayerUpdateOne {
	return puo.SetRoomID(r.ID)
}

// AddPlayerRoleIDs adds the "player_roles" edge to the PlayerRole entity by IDs.
func (puo *PlayerUpdateOne) AddPlayerRoleIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddPlayerRoleIDs(ids...)
	return puo
}

// AddPlayerRoles adds the "player_roles" edges to the PlayerRole entity.
func (puo *PlayerUpdateOne) AddPlayerRoles(p ...*PlayerRole) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPlayerRoleIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (puo *PlayerUpdateOne) Mutation() *PlayerMutation {
	return puo.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (puo *PlayerUpdateOne) ClearRoom() *PlayerUpdateOne {
	puo.mutation.ClearRoom()
	return puo
}

// ClearPlayerRoles clears all "player_roles" edges to the PlayerRole entity.
func (puo *PlayerUpdateOne) ClearPlayerRoles() *PlayerUpdateOne {
	puo.mutation.ClearPlayerRoles()
	return puo
}

// RemovePlayerRoleIDs removes the "player_roles" edge to PlayerRole entities by IDs.
func (puo *PlayerUpdateOne) RemovePlayerRoleIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemovePlayerRoleIDs(ids...)
	return puo
}

// RemovePlayerRoles removes "player_roles" edges to PlayerRole entities.
func (puo *PlayerUpdateOne) RemovePlayerRoles(p ...*PlayerRole) *PlayerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePlayerRoleIDs(ids...)
}

// Where appends a list predicates to the PlayerUpdate builder.
func (puo *PlayerUpdateOne) Where(ps ...predicate.Player) *PlayerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlayerUpdateOne) Select(field string, fields ...string) *PlayerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Player entity.
func (puo *PlayerUpdateOne) Save(ctx context.Context) (*Player, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlayerUpdateOne) SaveX(ctx context.Context) *Player {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlayerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlayerUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := player.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Player.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Email(); ok {
		if err := player.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Player.email": %w`, err)}
		}
	}
	return nil
}

func (puo *PlayerUpdateOne) sqlSave(ctx context.Context) (_node *Player, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Player.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, player.FieldID)
		for _, f := range fields {
			if !player.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != player.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(player.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(player.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Password(); ok {
		_spec.SetField(player.FieldPassword, field.TypeString, value)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(player.FieldEmail, field.TypeString, value)
	}
	if puo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.RoomTable,
			Columns: []string{player.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.RoomTable,
			Columns: []string{player.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlayerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   player.PlayerRolesTable,
			Columns: player.PlayerRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlayerRolesIDs(); len(nodes) > 0 && !puo.mutation.PlayerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   player.PlayerRolesTable,
			Columns: player.PlayerRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlayerRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   player.PlayerRolesTable,
			Columns: player.PlayerRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Player{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
