// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/smxlong/mud/ent/door"
	"github.com/smxlong/mud/ent/predicate"
	"github.com/smxlong/mud/ent/room"
)

// DoorUpdate is the builder for updating Door entities.
type DoorUpdate struct {
	config
	hooks    []Hook
	mutation *DoorMutation
}

// Where appends a list predicates to the DoorUpdate builder.
func (du *DoorUpdate) Where(ps ...predicate.Door) *DoorUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DoorUpdate) SetName(s string) *DoorUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DoorUpdate) SetNillableName(s *string) *DoorUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetDescription sets the "description" field.
func (du *DoorUpdate) SetDescription(s string) *DoorUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DoorUpdate) SetNillableDescription(s *string) *DoorUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DoorUpdate) ClearDescription() *DoorUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetDirection sets the "direction" field.
func (du *DoorUpdate) SetDirection(d door.Direction) *DoorUpdate {
	du.mutation.SetDirection(d)
	return du
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (du *DoorUpdate) SetNillableDirection(d *door.Direction) *DoorUpdate {
	if d != nil {
		du.SetDirection(*d)
	}
	return du
}

// SetFromID sets the "from" edge to the Room entity by ID.
func (du *DoorUpdate) SetFromID(id string) *DoorUpdate {
	du.mutation.SetFromID(id)
	return du
}

// SetNillableFromID sets the "from" edge to the Room entity by ID if the given value is not nil.
func (du *DoorUpdate) SetNillableFromID(id *string) *DoorUpdate {
	if id != nil {
		du = du.SetFromID(*id)
	}
	return du
}

// SetFrom sets the "from" edge to the Room entity.
func (du *DoorUpdate) SetFrom(r *Room) *DoorUpdate {
	return du.SetFromID(r.ID)
}

// SetToID sets the "to" edge to the Room entity by ID.
func (du *DoorUpdate) SetToID(id string) *DoorUpdate {
	du.mutation.SetToID(id)
	return du
}

// SetNillableToID sets the "to" edge to the Room entity by ID if the given value is not nil.
func (du *DoorUpdate) SetNillableToID(id *string) *DoorUpdate {
	if id != nil {
		du = du.SetToID(*id)
	}
	return du
}

// SetTo sets the "to" edge to the Room entity.
func (du *DoorUpdate) SetTo(r *Room) *DoorUpdate {
	return du.SetToID(r.ID)
}

// Mutation returns the DoorMutation object of the builder.
func (du *DoorUpdate) Mutation() *DoorMutation {
	return du.mutation
}

// ClearFrom clears the "from" edge to the Room entity.
func (du *DoorUpdate) ClearFrom() *DoorUpdate {
	du.mutation.ClearFrom()
	return du
}

// ClearTo clears the "to" edge to the Room entity.
func (du *DoorUpdate) ClearTo() *DoorUpdate {
	du.mutation.ClearTo()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DoorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DoorUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DoorUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DoorUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DoorUpdate) check() error {
	if v, ok := du.mutation.Name(); ok {
		if err := door.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Door.name": %w`, err)}
		}
	}
	if v, ok := du.mutation.Direction(); ok {
		if err := door.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "Door.direction": %w`, err)}
		}
	}
	return nil
}

func (du *DoorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(door.Table, door.Columns, sqlgraph.NewFieldSpec(door.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(door.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(door.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(door.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.Direction(); ok {
		_spec.SetField(door.FieldDirection, field.TypeEnum, value)
	}
	if du.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   door.FromTable,
			Columns: []string{door.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   door.FromTable,
			Columns: []string{door.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   door.ToTable,
			Columns: []string{door.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   door.ToTable,
			Columns: []string{door.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{door.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DoorUpdateOne is the builder for updating a single Door entity.
type DoorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DoorMutation
}

// SetName sets the "name" field.
func (duo *DoorUpdateOne) SetName(s string) *DoorUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DoorUpdateOne) SetNillableName(s *string) *DoorUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetDescription sets the "description" field.
func (duo *DoorUpdateOne) SetDescription(s string) *DoorUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DoorUpdateOne) SetNillableDescription(s *string) *DoorUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DoorUpdateOne) ClearDescription() *DoorUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetDirection sets the "direction" field.
func (duo *DoorUpdateOne) SetDirection(d door.Direction) *DoorUpdateOne {
	duo.mutation.SetDirection(d)
	return duo
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (duo *DoorUpdateOne) SetNillableDirection(d *door.Direction) *DoorUpdateOne {
	if d != nil {
		duo.SetDirection(*d)
	}
	return duo
}

// SetFromID sets the "from" edge to the Room entity by ID.
func (duo *DoorUpdateOne) SetFromID(id string) *DoorUpdateOne {
	duo.mutation.SetFromID(id)
	return duo
}

// SetNillableFromID sets the "from" edge to the Room entity by ID if the given value is not nil.
func (duo *DoorUpdateOne) SetNillableFromID(id *string) *DoorUpdateOne {
	if id != nil {
		duo = duo.SetFromID(*id)
	}
	return duo
}

// SetFrom sets the "from" edge to the Room entity.
func (duo *DoorUpdateOne) SetFrom(r *Room) *DoorUpdateOne {
	return duo.SetFromID(r.ID)
}

// SetToID sets the "to" edge to the Room entity by ID.
func (duo *DoorUpdateOne) SetToID(id string) *DoorUpdateOne {
	duo.mutation.SetToID(id)
	return duo
}

// SetNillableToID sets the "to" edge to the Room entity by ID if the given value is not nil.
func (duo *DoorUpdateOne) SetNillableToID(id *string) *DoorUpdateOne {
	if id != nil {
		duo = duo.SetToID(*id)
	}
	return duo
}

// SetTo sets the "to" edge to the Room entity.
func (duo *DoorUpdateOne) SetTo(r *Room) *DoorUpdateOne {
	return duo.SetToID(r.ID)
}

// Mutation returns the DoorMutation object of the builder.
func (duo *DoorUpdateOne) Mutation() *DoorMutation {
	return duo.mutation
}

// ClearFrom clears the "from" edge to the Room entity.
func (duo *DoorUpdateOne) ClearFrom() *DoorUpdateOne {
	duo.mutation.ClearFrom()
	return duo
}

// ClearTo clears the "to" edge to the Room entity.
func (duo *DoorUpdateOne) ClearTo() *DoorUpdateOne {
	duo.mutation.ClearTo()
	return duo
}

// Where appends a list predicates to the DoorUpdate builder.
func (duo *DoorUpdateOne) Where(ps ...predicate.Door) *DoorUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DoorUpdateOne) Select(field string, fields ...string) *DoorUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Door entity.
func (duo *DoorUpdateOne) Save(ctx context.Context) (*Door, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DoorUpdateOne) SaveX(ctx context.Context) *Door {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DoorUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DoorUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DoorUpdateOne) check() error {
	if v, ok := duo.mutation.Name(); ok {
		if err := door.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Door.name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Direction(); ok {
		if err := door.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "Door.direction": %w`, err)}
		}
	}
	return nil
}

func (duo *DoorUpdateOne) sqlSave(ctx context.Context) (_node *Door, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(door.Table, door.Columns, sqlgraph.NewFieldSpec(door.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Door.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, door.FieldID)
		for _, f := range fields {
			if !door.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != door.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(door.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(door.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(door.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.Direction(); ok {
		_spec.SetField(door.FieldDirection, field.TypeEnum, value)
	}
	if duo.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   door.FromTable,
			Columns: []string{door.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   door.FromTable,
			Columns: []string{door.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   door.ToTable,
			Columns: []string{door.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   door.ToTable,
			Columns: []string{door.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Door{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{door.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
