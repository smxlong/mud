// Code generated by ent, DO NOT EDIT.

package door

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the door type in the database.
	Label = "door"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDirection holds the string denoting the direction field in the database.
	FieldDirection = "direction"
	// EdgeFrom holds the string denoting the from edge name in mutations.
	EdgeFrom = "from"
	// EdgeTo holds the string denoting the to edge name in mutations.
	EdgeTo = "to"
	// Table holds the table name of the door in the database.
	Table = "doors"
	// FromTable is the table that holds the from relation/edge.
	FromTable = "doors"
	// FromInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	FromInverseTable = "rooms"
	// FromColumn is the table column denoting the from relation/edge.
	FromColumn = "door_from"
	// ToTable is the table that holds the to relation/edge.
	ToTable = "doors"
	// ToInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	ToInverseTable = "rooms"
	// ToColumn is the table column denoting the to relation/edge.
	ToColumn = "door_to"
)

// Columns holds all SQL columns for door fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldDirection,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "doors"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"door_from",
	"door_to",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Direction defines the type for the "direction" enum field.
type Direction string

// Direction values.
const (
	DirectionNorth Direction = "north"
	DirectionSouth Direction = "south"
	DirectionEast  Direction = "east"
	DirectionWest  Direction = "west"
	DirectionUp    Direction = "up"
	DirectionDown  Direction = "down"
)

func (d Direction) String() string {
	return string(d)
}

// DirectionValidator is a validator for the "direction" field enum values. It is called by the builders before save.
func DirectionValidator(d Direction) error {
	switch d {
	case DirectionNorth, DirectionSouth, DirectionEast, DirectionWest, DirectionUp, DirectionDown:
		return nil
	default:
		return fmt.Errorf("door: invalid enum value for direction field: %q", d)
	}
}

// OrderOption defines the ordering options for the Door queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDirection orders the results by the direction field.
func ByDirection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDirection, opts...).ToFunc()
}

// ByFromField orders the results by from field.
func ByFromField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromStep(), sql.OrderByField(field, opts...))
	}
}

// ByToField orders the results by to field.
func ByToField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToStep(), sql.OrderByField(field, opts...))
	}
}
func newFromStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FromTable, FromColumn),
	)
}
func newToStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ToTable, ToColumn),
	)
}
